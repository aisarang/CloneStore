整体的设计思想是简单、可靠、易维护，所以结构上会尽可能的简单，不会引入非必要的接口、抽象层。

之所以实体层、数据访问层和业务逻辑层剥离出来，主要是考虑到：
1. 因为安全原因，网站的前台和管理端要分开部署；代码上也会剥离，方便复用和维护；
2. 开发移动端（包括微信插件之类）的可能性比较大；
3. 后续数据可能会跨库存取，也有可能会读写分离；

之所以没有通过接口 IOC之类技术隔离DAL BLL UI层的耦合，主要是考虑到：
1. 多个实现的可能性不大，更多的可能是调整原来的实现
2. 过多的层次对开发人员的要求更高，除了要彻底理解，还需要额外的代码，如果不能彻底执行，反而更乱
3. 基于约定的开发会更有效率

总之，在初始阶段，质量和速度是第一位，扩展性只预留必须的。

各层次的划分：
1. 实体层中的对象，同时用于数据持久化和MVC的Model，也承担DTO的职责。对于仅用于MVC的对象，直接放在所在项目中。
2. 数据访问层封装数据持久化操作，包括文件（日志使用log4，放在最外层），ORM使用BLToolkit。
3. 业务层采用分部类的形式，将数据层的操作放在单独的文件中，数据库事务也放在此处处理。

开发规范：
基本按C#常见的命名法则，需要留意的：
1. 注释不是必须，除了配置文件中的配置项、核心的算法要有，其它地方根据代码的理解难易度决定。如果写，务必保证注释的正确性和一致性，宁缺毋滥。
2. 代码的风格按IDE默认的，修改完代码文件后尽量顺便格式化一下，快捷键：Ctrl+E,D
3. 尽可能的多写单元测试
